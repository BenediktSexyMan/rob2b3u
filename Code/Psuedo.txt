class Canon
{
	public:
	Canon(){}	// Constructor
	
	void Loop()
	{
		while(true)
		{
			auto obj = FindObject();
			if(obj::exists)
			{
				Calibrate(obj);
				Shoot();
			}
		}
	}
	
	vex::vision::object* FindObject()
	{
		for(unsigned int i = 0; i < _vis::objects.getLength(); i++)
		{
			if(_vis::objects[i].id == _objectId)
			{
				return _vis::objects[i];
			}
		}
		return vex::vision::object();
	}
	
	void Calibrate(vex::vision::object* obj)
	{
		while(_x < (obj::centerX - _margin) || x > (obj::centerX + _margin) || _y < (obj::centerY - _margin) || y > (obj::centerY + _margin))
		{
			int xMove = obj::centerX - _x;
			int yMove = obj::centerY - _y;
			Turn(xMove/abs(xMove));
			Tilt(yMove/abs(yMove));
			obj = FindObject();
		}
	}
	
	void Shoot()
	{
		Spin();
		Push();
		Spin(false);
		Push(false);
		
	}
	
	void Turn(int val)
	{
		/* Turn back wheels */
	}
	
	void Tilt(int val)
	{
		/* Tilt arm */
	}
	
	void Spin(bool on=true)
	{
		/* Turn on/off traction wheels */
	}
	
	void Push(bool on=true)
	{
		/* Turn on/off piston */
	}
	
	private:
	/*	  Traction motors	*/
	vex::motor* _utm1;	// Upper traction wheel motor 1
	vex::motor* _utm2;	// Upper traction wheel motor 2
	vex::motor* _ltm1;	// Lower traction wheel motor 1
	vex::motor* _ltm2;	// Lower traction wheel motor 2
	
	/*		 Piston			*/
	vex::motor* _pist;
	
	/*  Calibration motors	*/
	vex::motor* _arm;	// Arm motor
	vex::motor* _ldm;	// Left  drive motor
	vex::motor* _rdm;	// Right drive motor
	
	/*		  Vision		*/
	vex::vision* _vis;
	
	/*	  Non-Const Date	*/
	int _x;
	int _y;
	
	/* 		 Const Data		*/
	const int _objectId = /* Some number that describes the object we are looking for */;
	const int _margin = /* Some error margin for destance */;
	const int _armSpeed;	// Arm speed
	const int _driveSpeed;	// Speed of drive motors
}

int main()
{
	Canon canon;
	canon.Loop();
}